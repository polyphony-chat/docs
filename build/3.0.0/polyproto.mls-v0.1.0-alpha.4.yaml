openapi: 3.0.0
info:
  title: polyproto MLS APIs
  license:
    name: MIT License
    url: https://raw.githubusercontent.com/polyphony-chat/docs/refs/heads/main/LICENSE
  version: v0.1.0-alpha.4
tags: []
paths:
  /.p2/mls/v1/groups:
    post:
      operationId: groups_createGroup
      description: Create a new MLS group
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyPackage'
      security:
        - BearerAuth: []
  /.p2/mls/v1/groups/{groupId}:
    get:
      operationId: groups_getGroup
      description: Get information about an MLS group
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: |-
            The client either does not have the access rights to access this resource, or this resource
            does not exist. The ambiguity about the actual error has the purpose of protecting the targeted
            resource from information leaks.
      security:
        - BearerAuth: []
  /.p2/mls/v1/groups/{groupId}/commits:
    post:
      operationId: groups_submitCommit
      description: Submit a commit to apply pending proposals
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Welcome'
        '404':
          description: |-
            The client either does not have the access rights to access this resource, or this resource
            does not exist. The ambiguity about the actual error has the purpose of protecting the targeted
            resource from information leaks.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Commit'
      security:
        - BearerAuth: []
  /.p2/mls/v1/groups/{groupId}/commits/latest:
    get:
      operationId: groups_getLatestCommit
      description: Get the latest commit for a group
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commit'
        '404':
          description: |-
            The client either does not have the access rights to access this resource, or this resource
            does not exist. The ambiguity about the actual error has the purpose of protecting the targeted
            resource from information leaks.
      security:
        - BearerAuth: []
  /.p2/mls/v1/groups/{groupId}/members:
    get:
      operationId: members_getMembers
      summary: Get all group members
      description: Get all group members
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupMember'
        '404':
          description: |-
            The client either does not have the access rights to access this resource, or this resource
            does not exist. The ambiguity about the actual error has the purpose of protecting the targeted
            resource from information leaks.
      security:
        - BearerAuth: []
  /.p2/mls/v1/groups/{groupId}/members/{memberId}:
    get:
      operationId: members_getMember
      summary: Get a singular group member
      description: Get the current state of a group member
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
        - name: memberId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMember'
        '404':
          description: |-
            The client either does not have the access rights to access this resource, or this resource
            does not exist. The ambiguity about the actual error has the purpose of protecting the targeted
            resource from information leaks.
      security:
        - BearerAuth: []
  /.p2/mls/v1/groups/{groupId}/proposals:
    post:
      operationId: groups_submitProposal
      description: Submit a proposal to modify the group
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: |-
            The client either does not have the access rights to access this resource, or this resource
            does not exist. The ambiguity about the actual error has the purpose of protecting the targeted
            resource from information leaks.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Proposal'
      security:
        - BearerAuth: []
    get:
      operationId: members_getProposals
      description: Get all pending proposals for a group
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Proposal'
        '404':
          description: |-
            The client either does not have the access rights to access this resource, or this resource
            does not exist. The ambiguity about the actual error has the purpose of protecting the targeted
            resource from information leaks.
      security:
        - BearerAuth: []
  /.p2/mls/v1/keypackages:
    post:
      operationId: keypackages_addKeyPackages
      summary: Upload new KeyPackages
      description: |-
        Upload KeyPackages to the server, enabling other actors to encrypt messages for you and form
        groups with you.
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            text/plain:
              schema:
                anyOf:
                  - type: number
                    enum:
                      - 200
                  - type: number
                    enum:
                      - 413
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      description: The identifier of a faulty keypackage
                    reason:
                      type: string
                      description: A string describing what was wrong with this keypackage
                  required:
                    - id
                    - reason
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/KeyPackage'
      security:
        - BearerAuth: []
  /.p2/mls/v1/keypackages/{fid}:
    get:
      operationId: keypackages_discoverKeyPackages
      summary: Retrieve one or more KeyPackages for a user
      description: |-
        Discover KeyPackages for a certain user.
        Filter (allowelist) by MLS protocol versions, ciphersuites and extensions.
      parameters:
        - name: fid
          in: path
          required: true
          schema:
            type: string
        - name: versions
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
            default:
              - '1.0'
          explode: false
        - name: ciphersuites
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
            minItems: 1
          explode: false
        - name: extensions
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
            default: []
          explode: false
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/KeyPackage'
            text/plain:
              schema:
                anyOf:
                  - type: number
                    enum:
                      - 404
                  - type: number
                    enum:
                      - 204
      security:
        - BearerAuth: []
components:
  schemas:
    ClientCapabilities:
      type: object
      required:
        - versions
        - ciphersuites
        - extensions
      properties:
        versions:
          type: array
          items:
            type: string
          description: Supported MLS protocol versions
        ciphersuites:
          type: array
          items:
            type: string
          description: Supported ciphersuites
        extensions:
          type: array
          items:
            type: string
          description: Supported extensions
      description: Client capabilities and supported features
    Commit:
      type: object
      required:
        - id
        - groupId
        - epoch
        - proposals
        - signature
      properties:
        id:
          type: string
          description: Unique identifier for this commit
        groupId:
          type: string
          description: The group ID this commit applies to
        epoch:
          type: integer
          format: int32
          description: The epoch number this commit creates
        proposals:
          type: array
          items:
            $ref: '#/components/schemas/Proposal'
          description: The proposals being committed
        signature:
          type: string
          format: byte
          description: The commit sender's signature
      description: Represents a commit message that initiates a new epoch
    Group:
      type: object
      required:
        - id
        - epoch
        - members
        - publicKey
      properties:
        id:
          type: string
          description: Unique identifier for the group
        epoch:
          type: integer
          format: int32
          description: Current epoch number
        members:
          type: array
          items:
            $ref: '#/components/schemas/GroupMember'
          description: List of current group members
        publicKey:
          type: string
          format: byte
          description: Group's public key
      description: Represents a group in MLS
    GroupMember:
      type: object
      required:
        - id
        - keyPackage
        - role
      properties:
        id:
          type: string
          description: Unique identifier for the member
        keyPackage:
          allOf:
            - $ref: '#/components/schemas/KeyPackage'
          description: The member's key package
        role:
          allOf:
            - $ref: '#/components/schemas/MemberRole'
          description: The member's role in the group
      description: Represents a member in an MLS group
    KeyPackage:
      type: object
      required:
        - id
        - publicKey
        - capabilities
        - signature
        - lastResort
      properties:
        id:
          type: string
          minLength: 8
          maxLength: 128
          description: Unique identifier for this key package
        publicKey:
          type: string
          format: byte
          description: The client's public key
        capabilities:
          allOf:
            - $ref: '#/components/schemas/ClientCapabilities'
          description: The client's capabilities and supported ciphersuites
        signature:
          type: string
          format: byte
          description: The client's signature over the key package
        lastResort:
          type: boolean
          description: Whether this KeyPackage is to act as a "last resort" KeyPackage, for when all other KeyPackages have been exhausted.
          default: false
      description: Represents a client's capabilities and provides keys for group operations
    MemberRole:
      type: string
      enum:
        - Admin
        - Member
      description: Possible roles for group members
    Proposal:
      type: object
      required:
        - id
        - type
        - signature
      properties:
        id:
          type: string
          description: Unique identifier for this proposal
        type:
          allOf:
            - $ref: '#/components/schemas/ProposalType'
          description: The type of proposal
        target:
          type: string
          description: The target of the proposal (e.g., member to remove)
        keyPackage:
          allOf:
            - $ref: '#/components/schemas/KeyPackage'
          description: The key package for add proposals
        signature:
          type: string
          format: byte
          description: The proposal sender's signature
      description: Represents a proposed change to the group state
    ProposalType:
      type: string
      enum:
        - Add
        - Remove
        - Update
        - ReInit
        - PreSharedKey
        - ExternalInit
        - GroupContextExtensions
      description: Types of proposals that can be made
    Version:
      type: string
      enum:
        - v0.1.0-alpha.4
    Welcome:
      type: object
      required:
        - groupId
        - epoch
        - keyPackage
        - encryptedGroupState
      properties:
        groupId:
          type: string
          description: The group ID the new member is being added to
        epoch:
          type: integer
          format: int32
          description: The epoch number the new member is being added to
        keyPackage:
          allOf:
            - $ref: '#/components/schemas/KeyPackage'
          description: The key package of the new member
        encryptedGroupState:
          type: string
          format: byte
          description: Encrypted group state for the new member
      description: Welcome message for new group members
  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer
servers:
  - url: https://example.com
    description: Example endpoint
    variables: {}
